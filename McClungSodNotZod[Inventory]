//AUTHOR: Caleb McClung
//COURSE: CPT 187
//PURPOSE: This is a supportive class for the SodNotZod order program.
//This will load, write to, and retrieve data from external inventory file.
//STARTDATE: 7/21/2020


package edu.cpt187.mcclung.participation6;

//import classes to get prize, and load external inventory file
import java.util.Random;
import java.util.Scanner;
import java.io.IOException;
import java.io.FileInputStream;

public class Inventory 
{//START Inventory CLASS

	//DECLARE AND INIITIALIZE CLASS CONSTANTS
	private final String[] DISCOUNT_NAMES = {"Member", "Senior", "No Discount"};
	private final double[] DISCOUNT_RATES = {0.25, 0.15, 0.0};
	private final String[] PRIZE_NAMES = {"Extra Bucket", "Free 1-Year Membership", "Free Shovel"};
	private final int MAX_RECORDS = 5;
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;

	//DECLARE AND INITIALIZE VARIABLE ATTRIBUTES
	private int[] itemIDs = new int[MAX_RECORDS];
	private String[] itemNames = new String[MAX_RECORDS];
	private double[] itemPrices = new double[MAX_RECORDS];
	private int[] orderQuantity = new int[MAX_RECORDS];
	private double[] orderTotal = new double[MAX_RECORDS];
	private int[] inStockCounts = new int[MAX_RECORDS];
	private int itemSearchIndex = 0;
	private int recordCount = 0;

	//declare and initialize Random object
	private Random prizeGenerator = new Random();

	//Inventory CLASS CONSTRUCTOR
	public Inventory()
	{

	}//END Inventory CLASS CONSTRUCTOR


	//START SETTER METHODS		START SETTER METHODS			START SETTER METHODS

	//set reduction of inStockCounts
	public void setReduceStock(int borrowedHowMany)
	{
		inStockCounts[itemSearchIndex] -= borrowedHowMany;
	}//end setReduceStock

	//overload 1/2: set item arrays w/ external inventory file
	public void setLoadItems(String borrowedFileName)
	{
		recordCount = RESET_VALUE;
		//try to read file and load class attributes 
		try
		{
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));

			while(infile.hasNext() == true && recordCount < MAX_RECORDS)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++;
			}

			//bubble sort array
			setBubbleSort();
			infile.close();//close Scanner object
		}//end try
		catch(IOException ex)
		{
			recordCount = NOT_FOUND;
		}//end catch
	}//end setLoadItems 1/2

	//overload 2/2: set item arrays w/ external master order record file
	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
		recordCount = RESET_VALUE;
		//start try/catch to load arrays
		try
		{
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));

			//start while to load master file
			while(infile.hasNext() == true && recordCount < borrowedSize)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++;
			}//end while
			infile.close();//close Scanner object
		}//end try
		catch(IOException x)
		{
			recordCount = NOT_FOUND;
		}//end catch
	}//end setLoadItems 2/2

	//set itemSearchIndex
	public void setSearchIndex(int borrowedTargetID)
	{
		itemSearchIndex = getSearchResults(borrowedTargetID);
	}//end setSearchIndex

	//set to rearrange arrays w/ bubble sort
	public void setBubbleSort()
	{
		int last = recordCount - 1;
		boolean swap = false;

		while(last > 0)
		{
			int index = RESET_VALUE;

			while(index < last)
			{
				//start if1
				if(itemIDs[index] > itemIDs[index + 1])
				{
					setSwapArrayElements(index);
					swap = true;
				}//end if1

				index++;
			}//end secondary while

			//start if2
			if(swap == false)
			{
				last = RESET_VALUE;
			}//end if2
			else
			{
				last--;
			}//end else for if2

		}//end primary while


	}//end setBubbleSort

	//set swap for array elements in bubbles sort
	public void setSwapArrayElements(int borrowedIndex)
	{
		int tempID = itemIDs[borrowedIndex];
		String tempName = itemNames[borrowedIndex];
		double tempPrice = itemPrices[borrowedIndex];
		int tempCount = inStockCounts[borrowedIndex];

		itemIDs[borrowedIndex] = itemIDs[borrowedIndex + 1];
		itemIDs[borrowedIndex + 1] = tempID;

		itemNames[borrowedIndex] = itemNames[borrowedIndex + 1];
		itemNames[borrowedIndex + 1] = tempName;

		itemPrices[borrowedIndex] = itemPrices[borrowedIndex + 1];
		itemPrices[borrowedIndex + 1] = tempPrice;

		inStockCounts[borrowedIndex] = inStockCounts[borrowedIndex + 1];
		inStockCounts[borrowedIndex + 1] = tempCount;

	}//end setSwapArrayElements

	//END SETTER METHODS		END SETTER METHODS				END SETTER METHODS


	//START GETTER METHODS		START GETTER METHODS			START GETTER METHODS

	//get in stock counts
	public int[] getInStockCounts()
	{
		return inStockCounts;
	}//end getInStockCounts

	public int[] getItemIDs()
	{
		return itemIDs;
	}//end getItemIDs

	//get item names
	public String[] getItemNames()
	{
		return itemNames;
	}//end getItemNames

	//get item prices
	public double[] getItemPrices()
	{
		return itemPrices;
	}//end getItemPrice

	//get discount names
	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}//end getDiscountName

	//get discount rates
	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}//end getDiscountRates

	//get orderQuantity array
	public int[] getOrderQuantities()
	{
		return orderQuantity;
	}//end getOrderQuantities

	//get orderTotal array
	public double[] getOrderTotals()
	{
		return orderTotal;
	}//end getOrderTotals

	//get prize names
	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}//end getPrizeNames

	//get random number
	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}//end getRandomNumber

	//get max records
	public int getMaxRecords()
	{
		return MAX_RECORDS;
	}//end getMaxRecords

	//get item search index
	public int getItemSearchIndex()
	{
		return itemSearchIndex;
	}//end getItemSearchIndex

	//get record count
	public int getRecordCount()
	{
		return recordCount;
	}//end getRecordCount

	//get grand total of all orders
	public double getGrandTotal()
	{
		int localIndex = 0;
		double grandTotal = 0.0;

		while(localIndex < recordCount)
		{
			grandTotal += orderTotal[localIndex];
			localIndex++;
		}//end while

		return grandTotal;
	}//end getGrandTotal

	//get the result of binary search
	public int getSearchResults(int borrowedBorrowedID)
	{
		int two = 2;
		int one = 1;
		int first = RESET_VALUE;						
		int last = recordCount - one;						
		boolean found = false;
		int mid = RESET_VALUE;


		while(first <= last && found == false)
		{
			mid = (first + last) / two;

			if(itemIDs[mid] == borrowedBorrowedID)
			{
				found = true;
			}//end if
			else if(itemIDs[mid] < borrowedBorrowedID)
			{
				first = mid + one;
			}//end else if
			else
			{
				last = mid - one;
			}//end else
		}//end while

		if(found == false)
		{
			mid = NOT_FOUND;
		}//end if

		return mid;
	}//end getSearchResults

	//END GETTER METHODS		END GETTER METHODS			END GETTER METHODS


}//END Inventory CLASS

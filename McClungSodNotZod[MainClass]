//AUTHOR: Caleb McClung
//COURSE: CPT 187
//PURPOSE: This program will let user choose a product from the SodNotZod store.
//First you login or create an account, then upload an inventory file, then search
//for a product with its id you can then create an order of the sod you want along 
//with any discounts or prizes. The order record will then be written to the external master file.
//STARTDATE: 7/21/2020

package edu.cpt187.mcclung.participation6;

import java.util.Scanner;// IMPORT SCANNER

public class MainClass 
{//START MainClass


	//DECLARE AND INITIALIZE CLASS CONSTANTS
	public static final String[] MAIN_MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final String[] SUB_MENU_OPTIONS = {"Member", "Senior", "No Discount"};
	public static final String[] MENU_CHARS = {"[A]", "[B]", "[Q]"};
	public static final String[] FILE_MENU_CHARS = {"[A]", "[B]", "[R]"};
	public static final String[] SUB_MENU_CHARS = {"[A[", "[B]", "[C]"};
	public static final String MASTER_ACCOUNTS_NAME = "empAcct.txt";
	public static final String MASTER_FILE_NAME = "MasterOrderFile.dat";


	public static void main(String[] args) 
	{//START MAIN METHOD

		//DECLARE AND INITIALIZE SCANNER
		Scanner input = new Scanner(System.in);

		SodOrder mySodOrder = new SodOrder();
		Inventory currentInventory = new Inventory();
		UserAccounts currentUser = new UserAccounts(MASTER_ACCOUNTS_NAME);
		OrderWriter sodOrders = new OrderWriter(MASTER_FILE_NAME);

		//DECLARE AND INITIALIZE LOCAL VARIABLES
		String userName = "";
		char menuSelection = ' ';

		//welcome
		displayWelcomeBanner();

		//main menu
		menuSelection = validateMainMenu(input);


		//WHILE MAIN MENU NOT 'Q'
		while(menuSelection != 'Q')
		{
			// IF MAIN MENU == 'A'
			if(menuSelection == 'A')
			{
				//get user name
				userName = getUserName(input);

				//set searched index for username and check for password match
				currentUser.setSearchedIndex(userName, getPassword(input));

				//if no login failed
				if(currentUser.getSearchedIndex() < 0)
				{
					displayLoginFailed();
				}//end if login failed
				else 
				{
					//login successful
					displayLoginSuccessful();

					//FILE MENU
					menuSelection = validateFileMenu(input);

					//WHILE FILE MENU NOT 'R' RETURN
					while(menuSelection != 'R')
					{
						//IF FILE MENU == 'A' LOAD INVENTORY
						if(menuSelection == 'A')
						{
							//get file inventory file from user
							currentInventory.setLoadItems(getFileName(input));

							//IF INVENTORY FILE NOT FOUND
							if(currentInventory.getRecordCount() <= 0)
							{
								displayNotOpen();
							}//END IF FILE NOT FOUND

							//ELSE INVENTORY FILE IS FOUND
							else
							{
								displayFileOpened();
							}//END ELSE INVENTORY FILE IS FOUND

						}////END IF FILE MENU == 'A' LOAD INVENTORY

						//ELSE FILE MENU == 'B' CREATE ORDER
						else
						{
							//get item id
							currentInventory.setSearchIndex(validateSearchValue(input));

							//IF SEARCH ID FOUND
							if(currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}//END IF SEARCH ID FOUND

							//ELSE SEARCH ID IS FOUND
							else
							{
								//set product/purchase details
								mySodOrder.setLastItemSelectionIndex(currentInventory.getItemSearchIndex());
								mySodOrder.setItemID(currentInventory.getItemIDs());
								mySodOrder.setItemName(currentInventory.getItemNames());
								mySodOrder.setItemPrice(currentInventory.getItemPrices());

								//get how many items to purchase
								mySodOrder.setHowMany(validateHowMany(input));

								//IF AMOUNT ENTERED NOT IN STOCK
								if(mySodOrder.getInStockCount(currentInventory.getInStockCounts()) <
										mySodOrder.getHowMany())
								{
									displayOutOfStock();
								}//END IF AMOUNT ENTERED NOT IN STOCK

								//ELSE AMOUNT ENTERED IS IN STOCK
								else
								{
									//set discount for order
									mySodOrder.setDiscountType(validateDiscountMenu(input, 
											currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));

									//set discount info
									mySodOrder.setDiscountName(currentInventory.getDiscountNames());
									mySodOrder.setDiscountRate(currentInventory.getDiscountRates());
									mySodOrder.setDecreaseInStock(currentInventory);

									//set prize info
									mySodOrder.setPrizeName(currentInventory.getPrizeNames(), 
											currentInventory.getRandomNumber());

									//write order to master file
									sodOrders.setWriteOrder(mySodOrder.getItemID(), mySodOrder.getItemName(), 
											mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getTotalCost());

									//IF ORDER INCLUDED DISCOUNT
									if(mySodOrder.getDiscountRate() > 0.0)
									{
										displayItemReceipt(mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getDiscountName(), 
												mySodOrder.getDiscountRate(), mySodOrder.getDiscountAmt(), 
												mySodOrder.getDiscountPrice(), mySodOrder.getHowMany(), mySodOrder.getSubTotal(), 
												mySodOrder.getTaxRate(), mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(),
												mySodOrder.getPrizeName(), mySodOrder.getInStockCount(currentInventory.getInStockCounts()));

									}//END IF ORDER INCLUDED DISCOUNT

									//ELSE ORDER DID NOT INCLUDE DISCOUNT
									else {
										displayItemReceipt(mySodOrder.getItemName(), mySodOrder.getItemPrice(),
												mySodOrder.getHowMany(), mySodOrder.getSubTotal(), 
												mySodOrder.getTaxRate(), mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(),
												mySodOrder.getPrizeName(), mySodOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END ELSE ORDER DID NOT INCLUDE DISCOUNT

								}//END ELSE AMOUNT ENTERED IS IN STOCK

							}//END ELSE SEARCH ID IS FOUND

						}//END ELSE FILE MENU == 'B' CREATE ORDER

						//FILE MENU
						menuSelection = validateFileMenu(input);

					}//END WHILE FILE MENU NOT 'R' RETURN

					//MAIN MENU
					menuSelection = validateMainMenu(input);

				}//END ELSE LOGIN SUCCESSFUL

			}//END IF MENU SELECTION = 'A' LOGIN

			//ELSE MAIN MENU == 'B' CREATE AN ACCOUNT
			else	
			{
				//get new userName
				userName = getNewUserName(input);
				currentUser.setSearchedIndex(userName);

				//IF userName ALREADY TAKEN
				if(currentUser.getSearchedIndex() >= 0)
				{
					displayUserNameUnavailable();
				}//END IF userName ALREADY TAKEN

				else	//ELSE new userName IS GOOD
				{
					//enter password and write new account record to master file
					currentUser.setWriteOneRecord(userName, getNewPassword(input));

					//new account created
					displayNewAccountMessage();

				}//END ELSE USERNAME IS GOOD

			}//END ELSE MAIN MENU IS 'B'

			//main menu
			menuSelection = validateMainMenu(input);

		}//END WHILE MAIN MENU NOT 'Q' QUIT


		//IF ORDER PLACED
		if(sodOrders.getRecordCount() > 0)
		{
			//load records from master file to Inventory class
			currentInventory.setLoadItems(sodOrders.getFileName(), sodOrders.getRecordCount());

			System.out.println(sodOrders.getRecordCount());

			//display final report
			displayFinalReport(userName, currentInventory.getItemIDs(), currentInventory.getItemNames(), 
					currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), 
					currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal(), 
					currentInventory.getDiscountNames(), mySodOrder.getDiscountCounts(), currentInventory.getPrizeNames(), 
					mySodOrder.getPrizeCounts());

			System.out.println(sodOrders.getRecordCount());

		}//END IF ORDER PLACED

		//farewell message
		displayFarewellMessage();


		input.close();//CLOSE SCANNER
	}//END MAIN METHOD



	//START VOID METHODS				START VOID METHODS					START VOID METHODS


	//START BANNERS


	//welcome banner
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to the SodNotZod order program!");
		System.out.println("This will allow you to make an order");
		System.out.println("and record that order to the master file.\n");
	}//end displayWelcomeBanner

	//farewell message
	public static void displayFarewellMessage()
	{
		System.out.println("\nThank you for time today.");
		System.out.println("Have a good rest of your day!");
	}//end displayFarewellMessage


	//END BANNERS

	//START MENUS


	//main menu
	public static void displayMainMenu()
	{
		int localIndex = 0; //create counter for while loop

		System.out.println("\nMAIN MENU:");
		//while loop to display menu chars and options
		while(localIndex < MAIN_MENU_OPTIONS.length)
		{
			System.out.printf("%-4s%-12s\n", MENU_CHARS[localIndex], MAIN_MENU_OPTIONS[localIndex] );
			localIndex++;
		}//end while

		System.out.println("Please enter your selection here:");
	}//end displayMainMenu

	public static void displayFileMenu()
	{
		int localIndex = 0; //create counter for while loop

		System.out.println("\nFILE MENU:");
		//while loop to display menu chars and options
		while(localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-4s%-12s\n", FILE_MENU_CHARS[localIndex], FILE_MENU_OPTIONS[localIndex] );
			localIndex++;
		}//end while

		System.out.println("Please enter your selection here:");
	}//end displayFileMenu

	//discount menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0; //create counter for while loop

		System.out.println("\nDISCOUNT MENU:");
		//while loop to display menu chars and options
		while(localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-4s%-24s%8.1f%-1s\n", SUB_MENU_CHARS[localIndex], borrowedDiscountNames[localIndex],
					borrowedDiscountRates[localIndex] * 100, "%");
			localIndex++;
		}//end while loop

		System.out.println("Please enter your selection here:");
	}//end displayDiscountMenu


	//END MENUS

	//START PROMPT MESSAGES


	//display login successful message
	public static void displayLoginSuccessful()
	{
		System.out.println("Login successful.");
	}//end displayLoginSuccessful

	//display not open
	public static void displayFileOpened()
	{
		System.out.println("Inventory successfully loaded.");
	}//end displayNotOpen

	//display new account password prompt
	public static void displayNewPasswordPrompt()
	{
		System.out.println("Please enter the password for your new account:");
	}//end displayNewPasswordPrompt

	//display prompt to get new userName
	public static void displayNewUserNamePrompt()
	{
		System.out.println("What will be your new username?");
		System.out.println("Please enter here:");
	}//end displayNewUserNamePrompt

	//display new account created message
	public static void displayNewAccountMessage()
	{
		System.out.println("Your new account was successfully created.");
	}//end displayNewAccountMessage

	//END PROMPT MESSAGES

	//START ERROR MESSAGES


	//invalid menu selection
	public static void displayInvalidMenuSelection()
	{
		System.out.println("That was not a valid selection.\n");

	}//end displayInvalidMenuSelection

	//display username not in system
	public static void displayNoUserNameFound()
	{
		System.out.println("Sorry, username not in system.");
		System.out.println("Please create new username and password.");
	}//end displayNoUserNameFound

	//display login failed
	public static void displayLoginFailed()
	{
		System.out.println("Login failed. Create new account");
	}//end displayLoginFailed

	//display item not found
	public static void displayNotFound()
	{
		System.out.println("\nItem could not be located");
	}//end displayNotFound

	//display out of stock
	public static void displayOutOfStock()
	{
		System.out.println("Sorry we are out of stock for that item.");
	}//end displayOutOfStock

	//display not open
	public static void displayNotOpen()
	{
		System.out.println("Could not open file.");
	}//end displayNotOpen

	//display userName unavailable
	public static void displayUserNameUnavailable()
	{
		System.out.println("The username entered, is already in the system.");
		System.out.println("Please choose a different username,");
		System.out.println("or login with your current account.");
	}//end displayUserNameUnavailable


	//END ERROR MESSAGES

	//START RECEIPTS


	//overload 1/2: display order receipt w/ discount
	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice,
			String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, 
			double borrowedDiscountPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, 
			double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedinStockCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

		System.out.printf("%-26s%-20s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-26s%-3s%-8.2f\n\n", "Item Price:", "$", borrowedItemPrice);

		System.out.printf("%-26s%-20s\n", "Discount Name:", borrowedDiscountName); 
		System.out.printf("%-26s%16.1f%-2s\n", "Discount Rate:", borrowedDiscountRate, "%"); 
		System.out.printf("%-26s%-3s%-8.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-26s%-3s%-8.2f\n\n", "Discount Price:", "$", borrowedDiscountPrice);

		System.out.printf("%-26s%18d\n\n", "Quantity:", borrowedHowMany);

		System.out.printf("%-26s%-3s%-8.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-26s%16.1f%-2s\n", "Tax Rate:", borrowedTaxRate, "%");
		System.out.printf("%-26s%-3s%-8.2f\n\n", "Tax Amount:", "$", borrowedTaxAmt);

		System.out.printf("%-26s%-3s%-8.2f\n\n", "Order Total:", "$", borrowedTotalCost);

		System.out.printf("%-26s%20s\n\n", "Prize:", borrowedPrizeName);

		System.out.println("Buy more now: Only " + borrowedinStockCount + " bags of " + borrowedItemName
				+ "left in-stock!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end displayItemReceipt 1/2

	//overload 2/2: display item receipt w/out discount rate
	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, 
			int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, 
			double borrowedTotalCost, String borrowedPrizeName, int borrowedinStockCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

		System.out.printf("%-26s%-20s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-26s%-3s%-8.2f\n\n", "Item Price:", "$", borrowedItemPrice);

		System.out.printf("%-26s%18d\n\n", "Quantity:", borrowedHowMany);

		System.out.printf("%-26s%-3s%-8.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-26s%16.1f%-2s\n", "Tax Rate:", borrowedTaxRate, "%");
		System.out.printf("%-26s%-3s%-8.2f\n\n", "Tax Amount:", "$", borrowedTaxAmt);

		System.out.printf("%-26s%-3s%-8.2f\n\n", "Order Total:", "$", borrowedTotalCost);

		System.out.printf("%-26s%20s\n\n", "Prize:", borrowedPrizeName);

		System.out.println("Buy more now: Only " + borrowedinStockCount + " bags of " + borrowedItemName
				+ "left in-stock!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end displayItemReceipt 2/2


	//END RECEIPTS

	//START REPORT


	public static void displayFinalReport(String borrowedUserName, int[] borrowedItemIDs, String[] borrowedItemNames, 
			double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, 
			int borrowedRecordCount, double borrowedGrandTotal, String[] borrowedDiscountNames, 
			int[] borrowedDiscountCounts, String[] borrowedPrizeNames, int[] borrowedPrizeCounts)
	{
		int localIndex = 0;

		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-30s%-20s\n\n", "Employee Name:", borrowedUserName);

		System.out.printf("%-6s%-28s%-10s%-5s%-10s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");
		//while for order records
		while(localIndex < borrowedItemNames.length)
		{
			System.out.printf("%-6d%-28s%-8.2f%-5d%-8.2f\n", borrowedItemIDs[localIndex], 
					borrowedItemNames[localIndex], borrowedItemPrices[localIndex], 
					borrowedOrderQuantities[localIndex], borrowedOrderTotals[localIndex]);
			localIndex++;
		}//end while for order records

		System.out.printf("\n%-30s%-10s\n", "RECORD COUNT", "GRAND TOTAL");
		System.out.printf("\n%-30d%-2s%-8.2f\n\n", borrowedRecordCount, "$", borrowedGrandTotal);

		//reset counter and use while loop for discount info
		localIndex = 0;
		while(localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-4s%-23s%10d\n", borrowedDiscountNames[localIndex], " count: ", 
					borrowedDiscountCounts[localIndex]);
			localIndex++;
		}//end while for discount info
		System.out.println("");

		//reset counter and use while loop for prize info
		localIndex = 0;
		while(localIndex < borrowedPrizeNames.length)
		{
			System.out.printf("%-4s%-23s%10d\n", borrowedPrizeNames[localIndex], " count: ", 
					borrowedPrizeCounts[localIndex]);
			localIndex++;
		}//end while for prize info
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end displayFinalReport


	//END REPORT


	//END VOID METHODS					END VOID METHODS					END VOID METHODS

	//START VR METHODS					START VR METHODS					START VR METHODS


	//START PROMPTS

	//get userName
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = ""; 

		System.out.println("Please enter your username:");
		localUserName = borrowedInput.next();

		return localUserName;
	}//end getUserName


	//get password
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";

		System.out.println("Please enter password:");
		localPassword = borrowedInput.next();

		return localPassword;
	}//end getPassword

	//get file name
	public static String getFileName(Scanner borrowedInput)
	{
		String localInput = "";

		System.out.println("\nPlease enter the name of the inventory file here:");
		localInput = borrowedInput.next();

		return localInput;
	}//end getFileName

	//get new userName
	public static String getNewUserName(Scanner borrowedInput)
	{
		String localUserName = ""; 

		displayNewUserNamePrompt();
		localUserName = borrowedInput.next();

		return localUserName;
	}//end getNewUserName

	//get new password
	public static String getNewPassword(Scanner borrowedInput)
	{
		String localInput = "";

		displayNewPasswordPrompt();
		localInput = borrowedInput.next();

		return localInput;
	}//end getNewPassword


	//END PROMPTS

	//START VALIDATE MENUS


	//validate main menu selection
	public static char validateMainMenu(Scanner borrowedInput)
	{
		char localSelection = ' ';

		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validate selection
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			displayInvalidMenuSelection();
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end validation loop

		return localSelection;
	}//end validateMainMenu

	//validate file menu selection
	public static char validateFileMenu(Scanner borrowedInput)
	{
		char localSelection = ' ';

		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validate selection
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			displayInvalidMenuSelection();
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end while loop

		return localSelection;
	}//end validateFileMenu

	//validate product id to search
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localInput = 0;

		//get product id from user
		System.out.println("\nPlease enter the Product ID here:");
		localInput = borrowedInput.nextInt();

		//validate product id
		while(localInput <= 0)
		{
			System.out.println("\nUnfortunatley that is not a valid ID number.");
			System.out.println("\nPlease enter the Product ID here:");
			localInput = borrowedInput.nextInt();
		}//end validation loop

		return localInput;
	}//end validateSearchValue

	//discount menu
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames,
			double[] borrowedDiscountRates)
	{
		char localSelection = ' ';

		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validate localSelection
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			System.out.println("That isn't a valid selection");
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//end validation loop

		return localSelection;
	}//end validateDiscountMenu

	//validate how many of item 
	public static int validateHowMany(Scanner borrowedInput)
	{
		int localHowMany = 0;

		System.out.println("\nHow many buckets would you like to purchase?");
		System.out.println("Please enter here:");
		localHowMany = borrowedInput.nextInt();

		//validate how many
		while(localHowMany <= 0)
		{
			System.out.println("That is not a valid amount.");

			System.out.println("\nHow many buckets would you like to purchase?");
			System.out.println("Please enter here:");
			localHowMany = borrowedInput.nextInt();
		}//end validation loop

		return localHowMany;
	}//end validateHowMany


	//END VALIDATE MENUS


	//END VR METHODS					END VR METHODS						END VR METHODS

}//END MainClass
